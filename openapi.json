{
  "openapi": "3.0.3",
  "info": {
    "title": "C# Parser Microservice API",
    "description": "A generic REST API for C# code analysis. Provides endpoints to extract code structure, entities, and relationships from C# source files.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    },
    {
      "url": "https://csharp-parser.example.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/api/v1/parser/csharp/parse": {
      "post": {
        "tags": [
          "C# Parser"
        ],
        "summary": "Parse a C# file",
        "description": "Returns a normalized ParseResult structure with detailed entities, relationships, and metadata for a given C# file.",
        "operationId": "parseCsharpFile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful parsing result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParseResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., malformed JSON or invalid file paths).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during parsing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parser/csharp/supported-extensions": {
      "get": {
        "tags": [
          "C# Parser"
        ],
        "summary": "Get supported file extensions",
        "description": "Returns a list of file extensions recognized by the C# parser.",
        "operationId": "getSupportedExtensions",
        "responses": {
          "200": {
            "description": "A list of supported file extensions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    ".cs",
                    ".csx",
                    ".cshtml"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parser/csharp/init-files": {
      "get": {
        "tags": [
          "C# Parser"
        ],
        "summary": "Get initialization file names",
        "description": "Returns a list of common initialization file names for C# projects, such as AssemblyInfo.cs or GlobalUsings.cs.",
        "operationId": "getInitFiles",
        "responses": {
          "200": {
            "description": "A list of initialization file names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "AssemblyInfo.cs",
                    "GlobalUsings.cs"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/parser/csharp/resolve-import": {
      "post": {
        "tags": [
          "C# Parser"
        ],
        "summary": "Resolve an import path to file paths",
        "description": "Resolves a C# 'using' statement to one or more potential relative file paths within the repository.",
        "operationId": "resolveImportPath",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of resolved relative file paths.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "src/System/Collections/Generic/List.cs"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid import path or file context.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ParserRequest": {
        "type": "object",
        "description": "Request to parse a C# file.",
        "required": [
          "filePath",
          "repoPath"
        ],
        "properties": {
          "filePath": {
            "type": "string",
            "description": "Path to the C# source file to parse, relative to the repository root.",
            "example": "src/Services/UserService.cs"
          },
          "repoPath": {
            "type": "string",
            "description": "Absolute path to the repository root for resolving context.",
            "example": "/path/to/your/project"
          },
          "options": {
            "$ref": "#/components/schemas/ParserOptions"
          }
        }
      },
      "ParserOptions": {
        "type": "object",
        "description": "Configuration options for selective parsing.",
        "properties": {
          "extractReferences": {
            "type": "boolean",
            "default": true
          },
          "extractInheritance": {
            "type": "boolean",
            "default": true
          },
          "detectPatterns": {
            "type": "boolean",
            "default": true
          },
          "maxDepth": {
            "type": "integer",
            "default": 5
          }
        }
      },
      "ResolveImportRequest": {
        "type": "object",
        "required": [
          "importPath",
          "filePath",
          "repoPath"
        ],
        "properties": {
          "importPath": {
            "type": "string",
            "description": "The import/using path to resolve.",
            "example": "System.Collections.Generic"
          },
          "filePath": {
            "type": "string",
            "description": "The path of the file containing the import.",
            "example": "src/Services/UserService.cs"
          },
          "repoPath": {
            "type": "string",
            "description": "Absolute path to the repository root.",
            "example": "/path/to/your/project"
          }
        }
      },
      "ParseResult": {
        "type": "object",
        "description": "Complete parsing result for a single file.",
        "required": [
          "filePath",
          "language",
          "entities",
          "contentHash",
          "parseTimeMs"
        ],
        "properties": {
          "filePath": {
            "type": "string",
            "example": "src/Services/UserService.cs"
          },
          "language": {
            "type": "string",
            "enum": [
              "csharp"
            ],
            "example": "csharp"
          },
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParsedEntity"
            }
          },
          "relationships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "contentHash": {
            "type": "string",
            "description": "SHA-256 hash of the file content for caching.",
            "example": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          },
          "parseTimeMs": {
            "type": "integer",
            "description": "Time taken for parsing in milliseconds.",
            "example": 156
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParseError"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/FileMetadata"
          }
        }
      },
      "ParsedEntity": {
        "type": "object",
        "description": "Represents a single parsed code entity (class, method, etc.).",
        "required": [
          "name",
          "type",
          "location"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "GetUserAsync"
          },
          "type": {
            "type": "string",
            "enum": [
              "class",
              "method",
              "interface",
              "import",
              "property",
              "enum",
              "struct",
              "namespace"
            ],
            "example": "method"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParsedEntity"
            }
          },
          "modifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "public",
              "async"
            ]
          },
          "decorators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Decorator"
            }
          },
          "inheritance": {
            "type": "object",
            "properties": {
              "baseClasses": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "ControllerBase"
                ]
              },
              "interfaces": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "IUserService"
                ]
              }
            }
          },
          "returnType": {
            "type": "string",
            "example": "Task<User>"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          },
          "importData": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string",
                "example": "MyApp.Services"
              }
            }
          }
        }
      },
      "Relationship": {
        "type": "object",
        "description": "Represents a relationship between two entities.",
        "required": [
          "from",
          "to",
          "type"
        ],
        "properties": {
          "from": {
            "type": "string",
            "description": "Name of the source entity.",
            "example": "UserService"
          },
          "to": {
            "type": "string",
            "description": "Name of the target entity.",
            "example": "IUserRepository"
          },
          "type": {
            "type": "string",
            "enum": [
              "inherits",
              "implements",
              "calls",
              "references"
            ],
            "example": "implements"
          },
          "targetFile": {
            "type": "string",
            "description": "Relative path to the target file if the relationship is cross-file.",
            "nullable": true,
            "example": "src/Interfaces/IUserRepository.cs"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "Location": {
        "type": "object",
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "$ref": "#/components/schemas/Position"
          },
          "end": {
            "$ref": "#/components/schemas/Position"
          }
        }
      },
      "Position": {
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "description": "1-based line number.",
            "example": 12
          },
          "column": {
            "type": "integer",
            "description": "0-based column position.",
            "example": 19
          },
          "index": {
            "type": "integer",
            "description": "0-based character index from the start of the file.",
            "example": 156
          }
        }
      },
      "Decorator": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ApiController"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "\"api/[controller]\""
            ]
          }
        }
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "userId"
          },
          "type": {
            "type": "string",
            "example": "int"
          },
          "optional": {
            "type": "boolean",
            "default": false
          },
          "defaultValue": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ParseError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "CS0103: The name 'userRepo' does not exist in the current context"
          },
          "severity": {
            "type": "string",
            "enum": [
              "error",
              "warning",
              "info"
            ],
            "example": "error"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "FileMetadata": {
        "type": "object",
        "description": "High-level metadata about the parsed file.",
        "properties": {
          "loc": {
            "type": "integer",
            "description": "Lines of Code.",
            "example": 245
          },
          "complexityScore": {
            "type": "integer",
            "description": "Aggregated cyclomatic complexity.",
            "example": 8
          },
          "namespace": {
            "type": "string",
            "description": "The primary namespace of the file.",
            "example": "MyApp.Services"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "INVALID_FILE_PATH"
          },
          "message": {
            "type": "string",
            "example": "File path does not exist or is outside the repository."
          },
          "details": {
            "type": "string",
            "nullable": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "C# Parser",
      "description": "Endpoints for C# code analysis and parsing."
    }
  ]
}
