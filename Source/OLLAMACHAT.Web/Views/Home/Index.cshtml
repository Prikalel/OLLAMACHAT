@model VelikiyPrikalel.OLLAMACHAT.Web.Views.Home.Index

@{
    Layout = "_Layout";
    ViewData["Title"] = "Chat1";
}

<div class="chat-container">
    <div class="model-selector">
        <label>Model:</label>
        <select id="model-select">
        @foreach (string availableModel in Model.AvailableModels)
        {
            <option value="@availableModel">@availableModel</option>
        }
        </select>
    </div>

    <div id="chat-display"></div>

    <div id="input-area">
        <div class="input-wrapper">
            <textarea id="message-input" rows="3" placeholder="Type your message here..."></textarea>
            <div class="help-tooltip">
                <div class="help-icon">?</div>
                <span class="tooltip-text">/undo - to delete last message</span>
            </div>
        </div>
        <button id="send-button">Send</button>
    </div>
</div>

@section Scripts {
    <script>
        function appendMessage(role, content) {
            const chatDisplay = $('#chat-display');
            const messageClass = role === 'user' ? 'user-message' : 'ai-message';
            const prefix = role === 'user' ? 'You:' : 'AI:';

            const messageHtml = `<div class="message ${messageClass}">
                <strong>${prefix}</strong> <span style="color: #e0e0e0;">${content}</span>
            </div>`;
            chatDisplay.append(messageHtml);

            chatDisplay.scrollTop(chatDisplay[0].scrollHeight);
        }

        function showThinking() {
            const chatDisplay = $('#chat-display');
            chatDisplay.append(
                `<div class="message ai-message thinking">
                    <strong>AI:</strong> Thinking...
                </div>`
            );
            chatDisplay.scrollTop(chatDisplay[0].scrollHeight);
        }

        // SignalR HubConnection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // Setup SignalR message handlers
        connection.on("ReceiveMessage", (message) => {
            $('.thinking').last().remove();
            appendMessage('assistant', message);
        });

        connection.on("ReceiveMessageChunk", (chunk) => {
            const lastMessage = $('.ai-message').last();
            if (lastMessage.hasClass('thinking')) {
                lastMessage.removeClass('thinking');
                lastMessage.html(`<strong>AI:</strong> <span style="color: #e0e0e0;">${chunk}</span>`);
            } else {
                lastMessage.find('span').append(chunk);
            }
        });

        // Start SignalR connection
        connection.start().catch(err => console.error(err));

        $('#send-button').click(() => {
            const message = $('#message-input').val().trim();
            if (!message) return;

            // Clear input
            $('#message-input').val('');

            // Add user message
            appendMessage('user', message);

            showThinking();

            connection.invoke("SendMessage", message);
        });

        $('#model-select').change(function() {
            connection.invoke("ChangeModel", this.value);
        });

        // Enter key handling
        $('#message-input').keypress(function(e) {
            if (e.which === 13 && !e.shiftKey) {
                e.preventDefault();
                $('#send-button').click();
            }
        });

        // Load chat history
        $(document).ready(function() {
            fetch('/get_history')
                .then(response => response.json())
                .then(messages => {
                    messages.forEach(msg => {
                        appendMessage(msg.role, msg.content);
                    });
                });
        });
    </script>
}
